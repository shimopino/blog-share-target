---
description: API Development Guide for Web Share Target Backend
globs: packages/api/**/*
alwaysApply: true
---

このプロジェクトルールが参照されたことをチャットでユーザーに通知するために、このファイルを参照した場合は「オレは今からAPIを実装するぞ！ジョジョ！！」と叫んでください。

必ず @fundamental.mdc を前提条件として読み込んでください。

# AWS CDK と Lambda 実装のプロジェクトルール

以下は、AWS CDK と AWS Lambda を使用したアプリケーション開発のためのプロジェクトルールです。
このルールは「./packages/api」配下に適用します。

## プロジェクト構造とコード編成

- packages/api/lambda 配下は可能な限り純粋な関数を提供するのみにし、関心の分離を徹底する
- 関数型プログラミングの概念を応用して実装を進め、副作用を最小限に抑える
- packages/api/lib 配下は再利用可能なリソースを配置し、可能な限りコンポーサブルな構成を実現する
- packages/api/bin 配下はデプロイ環境を作成するために使用し、環境間の差分は設定ファイルから注入する
- packages/api/test 配下にテストコードを分離して、単体テストとインテグレーションテストを明確に区別する

## 実装方針

- Lambda の純粋関数を実装する場合には neverthrow のライブラリを使用して関数型プログラミングとして実装を行う
- AWS CDK の実装では可能な限り L2/L3 ハイレベルなコンストラクトを使用して、必要最小限の設定値のみを設定する
- 権限管理は grant/metric/connections を効果的に使用し、最小権限の原則を徹底する
- パラメータは App レベルから注入し、環境ごとに設定可能な値は Context または SSM Parameter Store から取得する
- Lambda SnapStart を活用し、Java Lambda 関数の起動パフォーマンスを向上させる

## 命名規則

- Construct ID は PascalCase で命名する
- Stage の Construct ID には環境名を付与する（例: DevStage, ProdStage）
- Stack の Construct ID にはサービスの名前を付与する（例: UserApiStack, PaymentProcessingStack）
- リソースの Construct ID にはシンプルかつ目的を表した名前を付与する（例: UserTable, PaymentQueue）
- すべての AWS リソースに標準化されたタグ（Project, Environment, Owner, CostCenter など）を付与する
- Lambda 関数名には目的と処理内容がわかる命名パターンを採用する（例: <service>-<action>-<resource>）

## AWS CDK ベストプラクティス

### 基本原則

- シンプルに始め、必要に応じて複雑さを追加する
- コードは後で要件に合わせてリファクタリングできるので、最初から全てのシナリオに対応する必要はない
- AWS Well-Architected Framework に沿った設計を心がける
- 運用の卓越性を重視し、CDK での監視とアラートの設定も標準化する

### コード編成のベストプラクティス

- 論理的な単位（API、データベース、モニタリングリソースなど）にアプリケーションを整理する
- 論理単位はインフラ、ランタイムコード、設定コードを含むコンストラクトとして実装する
- スタックは論理単位のデプロイモデルを定義する
- CDK Aspects を活用してクロスカッティングコンサーンを実装する（例：すべての Lambda にトレース設定を適用）
- 共通パターンは Custom Construct として抽象化し、再利用可能なコンポーネントライブラリを構築する

### 開発プロセス

- 全てのアプリケーション要素（ビジネスロジック、インフラ、設定）をコードで定義する
- メインブランチの各コミットは、アプリケーションの完全で一貫性のあるデプロイ可能なバージョンを表すようにする
- CDK Pipelines を活用し、インフラの CI/CD を自動化する
- cdk diff を活用してデプロイ前に変更内容を確認するレビュープロセスを確立する

### 設計と構成

- コードは再利用可能なコンポーネントとして設計し、必要に応じて共有ライブラリとして提供する
- 「設定よりも規約」の原則に従い、デフォルト値を適切に設定する
- アプリケーションの各部分の責任を明確に分離する
- 環境固有の値はパラメータとして外部から注入し、ハードコーディングしない

### セキュリティとパフォーマンス

- 最小権限の原則に従い、必要最小限のアクセス権限のみを付与する
- リソース間の接続は明示的に定義し、不要なアクセスを防止する
- パフォーマンスを考慮したリソース設計を行い、コストを最適化する

### テストと品質保証

- ユニットテスト、インテグレーションテスト、デプロイメントテストを実施する
- 静的解析ツールを活用してコード品質を維持する
- CI/CD パイプラインを構築し、変更の自動検証を行う
